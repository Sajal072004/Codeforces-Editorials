/*

⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠦⡀⠀⡠⢒⠁⠀⠀⢀⡔⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠢⡀⣀⠤⠒⠉⠉
⠀⠀⠀⠀⠀⠀⠀⠀⠁⢁⠀⠀⠀⢀⡼⠋⠠⠀⠀⠀⢠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢆⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢰⣯⢀⡆⡠⠋⠀⡠⠂⠰⠋⠀⡜⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠣⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣼⢧⣼⠎⠀⡠⠊⠀⢀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⣀
⠀⠀⠀⠀⠀⠀⠀⢰⢃⡴⢁⡔⠊⠀⠀⢠⠞⠀⠀⢸⠀⠀⠀⠀⠀⠀⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿
⠀⠀⠀⠀⠀⠀⢀⣿⠎⢀⡎⠀⠀⠀⠀⠃⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⣾⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹
⠀⠀⠀⠀⠀⠀⣸⠃⢠⠎⠀⠀⠀⠀⠀⠀⠀⠀⢠⢿⡀⠀⠀⠀⠀⠀⡇⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈
⠀⠀⠀⠀⠀⢀⠏⢠⠏⠀⠀⠀⠀⠀⠀⠀⠀⣤⠏⠘⡇⠀⠀⠀⠀⢸⠁⠀⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡜⢀⠏⠀⠀⠀⠀⠀⠀⠀⠀⣰⠯⢄⣀⡇⠀⠀⠀⠀⢸⠀⠱⡀⠹⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸
⠀⠀⠀⠀⡜⢀⡞⠀⠀⠀⠀⠀⠀⠀⠀⣰⠏⠀⠀⠈⡇⢸⠀⠀⠀⢸⠀⠀⠀⠀⠘⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⡜⢀⡼⠁⠀⠀⠀⠀⠀⠀⠀⢰⣏⣠⣀⡀⠀⢸⢾⢧⠀⠀⢸⠀⠀⠀⠀⠠⠜⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⡄⢸⡇⠀⠀⠀⠀⠀⢠⣿⠛⠛⣿⣿⣷⣜⣿⠸⡄⠀⢸⠀⠀⠀⠀⠀⢀⡀⠹⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡼⢠⣾⠃⡄⠀⠀⠀⢰⣿⡇⢸⣷⡿⠻⣿⣿⡟⠀⢻⡄⢸⠀⠀⠀⠀⠔⣡⣴⣶⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡇⢸⡟⠀⡇⠀⠀⠀⢸⣿⠣⠸⡝⠧⡤⣿⡏⠀⠀⠀⢳⡘⡄⠀⠀⠀⢾⡛⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠁⣾⠃⠀⢳⠀⠀⠀⢸⣿⠀⠀⠉⠒⠒⠋⠀⠀⠀⠀⠀⠙⣇⠀⠀⠀⠘⣿⣯⡀⣸⣿⡇⢈⣷⣄⣠⠀⠀⠀⠀⠀⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠉⠀⢰⠸⡄⠀⠀⡞⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠭⠭⠭⠞⠀⠚⢠⣿⣿⣆⠀⠀⠀⢀⡇⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢇⢷⡀⢰⠇⢸⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠁⢿⢿⡄⠀⠀⢸⡇⠈⡆⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⠘⣇⣾⠀⢸⡇⠳⣄⠀⠀⠀⠀⢲⠤⠤⠤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡿⠁⠀⣸⣿⣷⠀⠀⡼⡇⢠⠃⠀
⠀⠀⠀⠀⠀⢀⣀⣀⣀⢀⣹⣿⡄⢸⡇⠀⠀⠙⢦⣀⠀⠈⠳⠤⠀⠤⠟⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⠇⠀⣰⣟⣿⣿⣇⠀⡇⣿⡼⠀⠀
⠀⠀⢀⠶⡋⠉⠁⠀⠈⠉⠀⠈⠛⢾⣇⠀⢠⡴⠋⠈⢷⣄⡀⠀⠀⠀⠀⣀⣀⠤⠤⣴⣞⢻⣿⣿⡏⠀⣼⣋⣉⣹⣿⣿⣼⠀⣿⠃⠀⠀
⠀⢀⠃⣸⠁⠀⣼⠀⠀⣸⠁⠀⡄⠀⠹⠛⢻⡄⠀⠀⠈⠙⢮⡑⠊⣉⡽⠋⠀⠀⠀⠼⠉⢿⣿⣿⣀⣼⣿⣿⣿⣿⣿⣿⠋⠀⠁⠀⠀⠀
⠀⠘⢰⠇⠀⢰⡇⠀⢠⡏⠀⢰⠀⠀⡆⢀⡞⠇⠀⠀⠀⠀⠀⢹⠞⠁⠀⠀⠀⠀⠀⡐⣇⠀⠀⢸⠋⠉⠉⠛⠿⣿⣿⣿⡀⠀⠀⠀⠀⠀
⠀⠀⠻⠤⠤⡟⠀⣠⠞⠀⢀⠎⠀⠸⢹⡿⠁⠁⠀⠀⠀⠀⣠⣼⣤⡀⠀⢀⠎⠁⠀⠀⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠑⠚⣳⠤⠔⠛⠒⠢⠤⡞⠁⠀⠀⠀⠀⡀⡞⠁⠀⠀⢹⡄⢸⠀⠀⠀⠀⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢇⠀⠀⠀⠀⠀
⢀⠀⠀⣀⣀⣀⣀⣇⣀⠀⢀⣀⡀⢀⠁⠀⠀⠀⠀⠉⠀⠹⡄⠀⢀⡼⠁⠀⠀⠀⠀⠀⠀⠙⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣈⠶⠤⠀⠀⠀⠀⠀⠀⠀
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main() {
    //freopen("in.txt", "r", stdin); 
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    ll tst;
    cin >> tst;

    while(tst--){
        ll n;
        cin >> n;

        vector<ll> v(n);
        vector<ll> degree(n);
        
        ll sm = 0;

        for(ll i = 0; i < n; i++){
            cin >> v[i];
            sm += v[i];
        }

        priority_queue<ll> pq;

        for(int i = 0; i < n - 1; i++){ 
            int x, y;
            cin >> x >> y;
            x--, y--;  
            // non leaf
            if(degree[x] != 0)
                pq.push(v[x]);
            if(degree[y] != 0)
                pq.push(v[y]);
            degree[x]++;
            degree[y]++;
        }
        
        cout << sm << " ";

        for(int i = 1; i < n-1; i++){
            sm += pq.top();
            pq.pop();
            cout << sm << " ";
        }
        cout << endl;
    }

    return 0;
}
